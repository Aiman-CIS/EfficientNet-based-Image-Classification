imds = imageDatastore('C:\Users\Hp\Desktop\Dataset\proc Dataset', ...
    'IncludeSubfolders',true, 'LabelSource','foldernames'); % this for labeling by folder names

[imdsTrain,imdsValidation,imdsTest] = splitEachLabel(imds,0.7,0.15,0.15);
net = efficientnetb0(); % analyzeNetwork(lgraph)
numClasses = numel(categories(imdsTrain.Labels));
Input_Image=net.Layers(1).Name;
New_Conv_W=net.Layers(2).Name;
Feature_Learner=net.Layers(288).Name;
Output_Classifier=net.Layers(290).Name;
num_Of_Classes = numel(categories(imdsTrain.Labels));
imageSize = [224 224 ]; % you can use here the original dataset size
global GinputSize
GinputSize = imageSize;
inputLayer = imageInputLayer([imageSize 1], 'Name', net.Layers(1).Name,...
    'DataAugmentation', net.Layers(1).DataAugmentation, ...
    'Normalization', net.Layers(1).Normalization);

newConv1_Weights = net.Layers(2).Weights;
newConv1_Weights = mean(newConv1_Weights(:,:,1:3,:), 3); % taking the mean of kernal channels
newConv1 = convolution2dLayer(net.Layers(2).FilterSize(1), net.Layers(2).NumFilters,...
    'Name', net.Layers(2).Name,...
    'NumChannels', inputLayer.InputSize(3),...
    'Stride', net.Layers(2).Stride,...
    'DilationFactor', net.Layers(2).DilationFactor,...
    'Padding', net.Layers(2).PaddingSize,...
    'Weights', newConv1_Weights,...BiasLearnRateFactor 
    'Bias', net.Layers(2).Bias,...
    'BiasLearnRateFactor', net.Layers(2).BiasLearnRateFactor);
New_Feature_Learner=fullyConnectedLayer(num_Of_Classes,...
    'Name','Crack Feature Learner',...
    'WeightLearnRateFactor' , 10, ...
     'WeightLearnRateFactor' , 10);
 New_Classification_Layer=classificationLayer('Name','Crack Classifier');
 Network_Architecture=layerGraph(net);
 New_Network=replaceLayer( Network_Architecture,Input_Image,inputLayer);
 New_Network=replaceLayer( New_Network,New_Conv_W,newConv1);
 New_Network=replaceLayer( New_Network,Feature_Learner,New_Feature_Learner);
 New_Network=replaceLayer(New_Network,Output_Classifier,New_Classification_Layer);
 analyzeNetwork(New_Network)
 augimdsTrain = augmentedImageDatastore([imageSize 1],imdsTrain);
augimdsValidation = augmentedImageDatastore([imageSize 1],imdsValidation);
augimdsTest = augmentedImageDatastore([imageSize 1],imdsTest);


 options = trainingOptions('sgdm', ...
    'MiniBatchSize',10,...
    'MaxEpochs',5, ...
    'InitialLearnRate',0.01, ...
    'Shuffle','every-epoch', ...
    'ValidationData',augimdsValidation, ...
    'ValidationFrequency',3, ...
    'Verbose',false, ...
    'Plots','training-progress');
net=trainNetwork( augimdsTrain,New_Network,options);
save net;
 
 
  
 
